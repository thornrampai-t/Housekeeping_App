import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:intl/intl.dart';
import 'package:project/widget/warnphonno.dart';

class FirestoreService {
  Future<String?> getUserType(String userId) async {
    List<String> collections = ['Customer', 'Employee', 'Admin'];

    for (String collection in collections) {
      DocumentSnapshot doc =
          await FirebaseFirestore.instance
              .collection(collection)
              .doc(userId)
              .get();
      if (doc.exists) {
        return collection; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á user
      }
    }
    return null;
  }

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
  final CollectionReference employee = FirebaseFirestore.instance.collection(
    'Employee',
  );

  Stream<QuerySnapshot> getWhereDocIdEmployee(String docId) {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° docId
    return employee.where(FieldPath.documentId, isEqualTo: docId).snapshots();
  }

  Stream<QuerySnapshot> getBookingSelectedDate(
    DateTime? selectDate,
    String employeeId,
  ) {
    // Remove the time part of selectDate
    DateTime startOfDay = DateTime(
      selectDate!.year,
      selectDate.month,
      selectDate.day,
    );

    // Log the formatted date to check
    print('startOfDay: $startOfDay');

    return employee
        .doc(employeeId) // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏à‡∏≤‡∏Å ID
        .collection("Booking") // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Collection ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô
        .where(
          'selectedDate',
          isGreaterThanOrEqualTo: startOfDay, // Start of the day
          isLessThanOrEqualTo: startOfDay.add(
            Duration(days: 1),
          ), // End of the day
        ) // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° selectedDate ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        .where('status',isEqualTo: '‡∏à‡∏≠‡∏á')
        .snapshots(); // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô Stream ‡∏Ç‡∏≠‡∏á QuerySnapshot
  }

  Stream<QuerySnapshot> getWhereDeepCleanStream() {
    final deepCleanStream =
        employee.where('serviceType', isEqualTo: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î').snapshots();
    return deepCleanStream;
  }

  Stream<QuerySnapshot> getWhereGardenStream() {
    final deepCleanStream =
        employee.where('serviceType', isEqualTo: '‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏ß‡∏ô').snapshots();
    return deepCleanStream;
  }

  Stream<QuerySnapshot> getWhereCareStream() {
    final deepCleanStream =
        employee.where('serviceType', isEqualTo: "‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏").snapshots();
    return deepCleanStream;
  }

  Stream<QuerySnapshot> getWherePetStream() {
    final deepCleanStream =
        employee.where('serviceType', isEqualTo: '‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á').snapshots();
    return deepCleanStream;
  }

  Stream<QuerySnapshot> getEmployee() {
    final employeeSteam = employee.orderBy('name').snapshots();

    return employeeSteam;
  }

  Stream<QuerySnapshot> searchEmployee(String query) {
    if (query.isEmpty) {
      return getEmployee(); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    }

    return employee
        .where('name', isGreaterThanOrEqualTo: query)
        .where('name', isLessThanOrEqualTo: query + '\uf8ff') // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö prefix
        .snapshots();
  }

  Stream<String> getServiceTypeStream(String docId) {
    final serviceTypeStream = employee
        .doc(docId) // Use the docId to directly access the document
        .snapshots() // Get a stream of the document's snapshots
        .map((snapshot) {
          if (snapshot.exists) {
            final data = snapshot.data() as Map<String, dynamic>;
            final serviceType =
                data['serviceType']?.toString() ??
                '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'; // Retrieve serviceType
            return serviceType;
          } else {
            return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'; // Return default message if document doesn't exist
          }
        });

    return serviceTypeStream;
  }

  Stream<List<Map<String, dynamic>>> getRating(String employeeId) {
    return employee
        .doc(employeeId) // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏à‡∏≤‡∏Å ID
        .collection("Reviews") // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Collection ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô
        .snapshots()
        .map((snapshot) {
          return snapshot.docs.map((doc) {
            final data = doc.data() as Map<String, dynamic>;
            return data;
          }).toList();
        });
  }

  Stream<List<Map<String, dynamic>>> getReviews(String employeeId) {
    print("Calling getReviews() for employeeId: $employeeId"); // ‚úÖ Debug log

    return employee
        .doc(employeeId) // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏à‡∏≤‡∏Å ID
        .collection("Reviews") // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Collection ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô
        .orderBy("timestamp", descending: true) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        .snapshots()
        .map((snapshot) {
          print(
            "Received snapshot with ${snapshot.docs.length} reviews",
          ); // ‚úÖ Debug log
          return snapshot.docs.map((doc) {
            final data = doc.data() as Map<String, dynamic>;
            print("Review data: $data"); // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô
            return data;
          }).toList();
        });
  }

  Future<void> addReview(
    String employeeId,
    double rating,
    String comment,
    String customerId,
  ) async {
    try {
      print("Adding review for employeeId: $employeeId"); // ‚úÖ Debug log

      // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô Reviews ‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
      await employee.doc(employeeId).collection("Reviews").add({
        "rating": rating,
        "comment": comment,
        "timestamp": FieldValue.serverTimestamp(),
        'customerId': customerId,
      });

      print("Review added successfully!"); // ‚úÖ Debug log
    } catch (e) {
      print("Error adding review: $e"); // ‚úÖ Debug log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error
    }
  }

  Future<String> getImageEmpolyee(String filePath) async {
    try {
      String downloadUrl =
          await FirebaseStorage.instance.ref(filePath).getDownloadURL();
      print("Download URL: $downloadUrl");
      return downloadUrl; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ URL
    } catch (e) {
      print("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e");
      throw Exception(
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á URL ‡πÑ‡∏î‡πâ",
      ); // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î, ‡πÇ‡∏¢‡∏ô exception
    }
  }

  Future<void> addHistoryEmployee(
    String userDocID,
    String employeeDocID,
    Map<String, dynamic> booking,
  ) async {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å userDocID
    QuerySnapshot querySnapshot =
        await employee
            .where(FieldPath.documentId, isEqualTo: employeeDocID)
            .get();

    if (querySnapshot.docs.isNotEmpty) {
      // ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      DocumentReference customerDoc = querySnapshot.docs.first.reference;

      // ‡πÉ‡∏ä‡πâ add() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Firestore ‡∏™‡∏£‡πâ‡∏≤‡∏á docId ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô collection ‡πÉ‡∏´‡∏°‡πà
      DocumentReference newBookingDoc = await customerDoc
          .collection('Booking')
          .add(booking);

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° historyDocId ‡∏•‡∏á‡πÉ‡∏ô booking ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á docId ‡πÉ‡∏´‡∏°‡πà
      booking['historyDocId'] = newBookingDoc.id;
      await newBookingDoc.update({'historyDocId': newBookingDoc.id});

      print(
        "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡∏á‡πÉ‡∏ô collection ‡πÉ‡∏´‡∏°‡πà 'newBookingHistory' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      );
      print("üìù historyDocId ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà: ${newBookingDoc.id}");
    } else {
      print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  }

  Stream<DocumentSnapshot> getBookingDetailsStream(
    String employeeDocID,
    String bookingId,
  ) {
    return employee
        .doc(employeeDocID) // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ employee ‡∏ï‡∏≤‡∏° employeeDocID
        .collection('Booking') // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á collection 'Booking'
        .doc(bookingId) // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ document ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ bookingId
        .snapshots(); // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
  }

  Future<void> updateFullNameEmployee(String docId, String newUserName) async {
    try {
      DocumentReference customerDoc = FirebaseFirestore.instance
          .collection('Employee')
          .doc(docId); // ‡πÉ‡∏ä‡πâ docId ‡πÅ‡∏ó‡∏ô userId

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ document ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      DocumentSnapshot docSnapshot = await customerDoc.get();
      if (docSnapshot.exists) {
        await customerDoc.update({'name': newUserName});
        print("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô '$newUserName' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      } else {
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ docId = '$docId'");
      }
    } catch (e) {
      print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e");
    }
  }

  Future<void> updatePhoneNumEmployee(String docId, String newPhoneNum) async {
    try {
      DocumentReference customerDoc = FirebaseFirestore.instance
          .collection('Employee')
          .doc(docId); // ‡πÉ‡∏ä‡πâ docId ‡πÅ‡∏ó‡∏ô userId

      DocumentSnapshot docSnapshot = await customerDoc.get();
      if (docSnapshot.exists) {
        await customerDoc.update({'phoneNumber': newPhoneNum});
        print("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô '$newPhoneNum' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      } else {
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ docId = '$docId'");
      }
    } catch (e) {
      print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e");
    }
  }

  Future<void> updatePasswordEmployee(
    String oldPassword,
    String newPassword,
  ) async {
    try {
      print("üü° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô...");

      // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Firebase Authentication
      User? user = FirebaseAuth.instance.currentUser;

      if (user == null) {
        print("‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
        return;
      }

      print("üîπ UID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡∏π‡πà: ${user.uid}");

      // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á Credential ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏≠‡∏≠‡∏ò‡∏¥‡πÄ‡∏Å‡∏£‡∏ô
      AuthCredential credential = EmailAuthProvider.credential(
        email: user.email!,
        password: oldPassword,
      );

      // üîπ ‡∏£‡∏µ‡∏≠‡∏≠‡∏ò‡∏¥‡πÄ‡∏Å‡∏£‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      await user.reauthenticateWithCredential(credential);
      print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏≠‡∏≠‡∏ò‡∏¥‡πÄ‡∏Å‡∏£‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

      // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô Firebase Authentication
      await user.updatePassword(newPassword);
      print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô Firebase Authentication ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

      // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô Firestore
      await FirebaseFirestore.instance
          .collection("Employee")
          .doc(user.uid)
          .update({
            "password": newPassword, // üîπ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
          });

      print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô Firestore ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } on FirebaseAuthException catch (e) {
      print("üî• Firebase Error: ${e.code}");
      print("üî• Error Message: ${e.message}");
      throw Exception(
        "Error updating password in Firebase Authentication: ${e.message}",
      );
    } catch (e) {
      print("üî• Error: ${e.toString()}");
      throw Exception("Error updating password: ${e.toString()}");
    }
  }

  //--------------------------------------------------------------------
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• customer
  final CollectionReference customer = FirebaseFirestore.instance.collection(
    'Customer',
  );

  Future<String?> getDocIdByGoogleEmail(String email) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ email ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ
      print('Searching for user with email: $email');

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô 'Customer' ‡∏ó‡∏µ‡πà‡∏°‡∏µ 'userEmail' ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      QuerySnapshot querySnapshot =
          await FirebaseFirestore.instance
              .collection('Customer')
              .where('userEmail', isEqualTo: email)
              .get();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏à‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (querySnapshot.docs.isNotEmpty) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö email, ‡∏î‡∏∂‡∏á docId ‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        String docId = querySnapshot.docs.first.id;
        print('Found docId: $docId');
        return docId;
      } else {
        print('No user found with that email.');
        return null;
      }
    } catch (e) {
      print('Error fetching docId: $e');
      return null;
    }
  }

  Future<Map<String, String?>?> getDocIdByEmail(String email) async {
    try {
      List<String> collections = ['Customer', 'Employee', 'Admin'];

      for (String collection in collections) {
        print('Searching in collection: $collection for email: $email');

        QuerySnapshot querySnapshot =
            await FirebaseFirestore.instance
                .collection(collection)
                .where('userEmail', isEqualTo: email)
                .limit(1) // ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
                .get();

        if (querySnapshot.docs.isNotEmpty) {
          String docId = querySnapshot.docs.first.id;
          print('Found docId in $collection: $docId');

          return {
            'docId': docId,
            'userType': collection, // ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á user
          };
        }
      }

      print('No user found with that email.');
      return null;
    } catch (e) {
      print('Error fetching docId: $e');
      return null;
    }
  }

  Stream<String> getUserNameStream(String docId) {
    final customerStream = customer
        .where(
          FieldPath.documentId,
          isEqualTo: docId,
        ) // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å docId ‡πÅ‡∏ó‡∏ô userId
        .snapshots()
        .map((snapshot) {
          if (snapshot.docs.isNotEmpty) {
            final doc = snapshot.docs.first.data() as Map<String, dynamic>;
            final userName = doc['userName'].toString(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• userName

            return userName;
          } else {
            return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
          }
        });

    return customerStream;
  }

  Stream<String> getUserPhoneNumStream(String docId) {
    final customerStream = customer
        .where(
          FieldPath.documentId,
          isEqualTo: docId,
        ) // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å docId ‡πÅ‡∏ó‡∏ô userId
        .snapshots()
        .map((snapshot) {
          if (snapshot.docs.isNotEmpty) {
            final doc = snapshot.docs.first.data() as Map<String, dynamic>;
            final userName = doc['phoneNum'].toString(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• userName

            return userName;
          } else {
            return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
          }
        });

    return customerStream;
  }

  Future<bool> checkPhoneNoOnce(BuildContext context, String docId) async {
    var querySnapshot =
        await customer.where(FieldPath.documentId, isEqualTo: docId).get();

    if (querySnapshot.docs.isEmpty) {
      print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ");
      return false; // ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    }

    var userData = querySnapshot.docs.first.data() as Map<String, dynamic>;
    if (userData.containsKey('phoneNum') &&
        userData['phoneNum'].toString().isNotEmpty) {
      print("‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${userData['phoneNum']}");
      return true;
    } else {
      showPopup(
        context,
        "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
        "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
      );
      return false;
    }
  }

  Stream<String> getImageCustomerStream(String docId) {
    return FirebaseFirestore.instance
        .collection('Customer')
        .doc(docId)
        .snapshots()
        .map((snapshot) {
          if (snapshot.exists) {
            return snapshot['userPhoto'] ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
          }
          return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
        });
  }

  Stream<QuerySnapshot> getHistory(String userDocId) {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Firestore ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ docId
    return FirebaseFirestore.instance
        .collection('Customer')
        .doc(userDocId)
        .collection('BookingHistory')
        .orderBy('bookingDate', descending: true)
        .snapshots(); // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô Stream ‡∏Ç‡∏≠‡∏á QuerySnapshot
  }

  Stream<QuerySnapshot> getHistoryHomepage(String userDocId) {
    DateTime now = DateTime.now();
    Timestamp timestampNow = Timestamp.fromDate(now);

    print("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore...");

    return FirebaseFirestore.instance
        .collection('Customer')
        .doc(userDocId)
        .collection('BookingHistory')
        // .where('status', isEqualTo: "‡∏à‡∏≠‡∏á")
        .where('selectedDate', isGreaterThanOrEqualTo: timestampNow)
        .orderBy(
          'selectedDate',
          descending: false,
        ) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡πÑ‡∏Å‡∏•‡∏™‡∏∏‡∏î
        .limit(1) // üìå ‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÅ‡∏Ñ‡πà 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        .snapshots();
  }

  Stream<QuerySnapshot> getAddressesStream(String userId) {
    return FirebaseFirestore.instance
        .collection('Customer')
        .doc(userId)
        .collection('addresses')
        .snapshots();
  }

  Future<void> addHistoryCustomer(
    String userDocID,
    String employeeDocID,
    Map<String, dynamic> booking,
  ) async {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å userDocID
    QuerySnapshot querySnapshot =
        await customer.where(FieldPath.documentId, isEqualTo: userDocID).get();

    if (querySnapshot.docs.isNotEmpty) {
      // ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      DocumentReference customerDoc = querySnapshot.docs.first.reference;

      // ‡πÉ‡∏ä‡πâ add() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Firestore ‡∏™‡∏£‡πâ‡∏≤‡∏á docId ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô collection ‡πÉ‡∏´‡∏°‡πà
      DocumentReference newBookingDoc = await customerDoc
          .collection('BookingHistory')
          .add(booking);

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° historyDocId ‡∏•‡∏á‡πÉ‡∏ô booking ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á docId ‡πÉ‡∏´‡∏°‡πà
      booking['historyDocId'] = newBookingDoc.id;
      await newBookingDoc.update({'historyDocId': newBookingDoc.id});

      print(
        "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡∏á‡πÉ‡∏ô collection ‡πÉ‡∏´‡∏°‡πà 'newBookingHistory' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      );
      print("üìù historyDocId ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà: ${newBookingDoc.id}");
    } else {
      print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  }

  Future<bool> checkTime(
    BuildContext context,
    String employeeId,
    Timestamp date,
  ) async {
    try {
      DateTime selectedDate = date.toDate();

      if (selectedDate.hour < 8 ||
          selectedDate.hour > 20 ||
          (selectedDate.hour == 20 && selectedDate.minute > 0)) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 8 ‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤‡∏ñ‡∏∂‡∏á 2 ‡∏ó‡∏∏‡πà‡∏°'),
            backgroundColor: Colors.red,
          ),
        );
        return false; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ false ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
      }

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô collection 'Employee' ‡∏ï‡∏≤‡∏° employeeId
      var querySnapshot =
          await FirebaseFirestore.instance
              .collection('Employee')
              .where(FieldPath.documentId, isEqualTo: employeeId)
              .get();

      if (querySnapshot.docs.isEmpty) {
        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á employeeId ‡πÉ‡∏ô collection 'Employee'
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ");
        return false; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ employee
      var employeeDoc = querySnapshot.docs.first;
      var bookingCollection = employeeDoc.reference.collection('Booking');

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô collection 'Booking' ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      var bookingSnapshot =
          await bookingCollection.where('selectedDate', isEqualTo: date).get();

      if (bookingSnapshot.docs.isNotEmpty) {
        // ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ
        print("‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß");

        // ‡πÅ‡∏™‡∏î‡∏á SnackBar ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text(
              '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß',
            ),
            backgroundColor: Colors.red,
          ),
        );
        return false; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ false ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
      }

      // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ)
      return true;
    } catch (e) {
      print("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e");
      return false; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ false ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    }
  }

  Future<void> saveAddress(
    String userId,
    String nameAddress,
    String addaddress,
    LatLng position,
  ) async {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
    Map<String, dynamic> listMarkLocation = {
      'name': nameAddress,
      'address': addaddress,
      'position': GeoPoint(position.latitude, position.longitude),
    };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö addressDocId
    await FirebaseFirestore.instance
        .collection('Customer')
        .doc(userId)
        .collection('addresses')
        .add(listMarkLocation)
        .then((docRef) async {
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å addressDocId ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
          await docRef.update({'addressDocId': docRef.id});
        });
  }

  Future<void> updateFullNameCustomer(String docId, String newUserName) async {
    try {
      DocumentReference customerDoc = FirebaseFirestore.instance
          .collection('Customer')
          .doc(docId); // ‡πÉ‡∏ä‡πâ docId ‡πÅ‡∏ó‡∏ô userId

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ document ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      DocumentSnapshot docSnapshot = await customerDoc.get();
      if (docSnapshot.exists) {
        await customerDoc.update({'userName': newUserName});
        print("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô '$newUserName' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      } else {
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ docId = '$docId'");
      }
    } catch (e) {
      print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e");
    }
  }

  Future<void> updatePhoneNumCustomer(String docId, String newPhoneNum) async {
    try {
      DocumentReference customerDoc = FirebaseFirestore.instance
          .collection('Customer')
          .doc(docId); // ‡πÉ‡∏ä‡πâ docId ‡πÅ‡∏ó‡∏ô userId

      DocumentSnapshot docSnapshot = await customerDoc.get();
      if (docSnapshot.exists) {
        await customerDoc.update({'phoneNum': newPhoneNum});
        print("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô '$newPhoneNum' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      } else {
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ docId = '$docId'");
      }
    } catch (e) {
      print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e");
    }
  }

  Future<void> updatePasswordCustomer(
    String oldPassword,
    String newPassword,
  ) async {
    try {
      print("üü° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô...");

      // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Firebase Authentication
      User? user = FirebaseAuth.instance.currentUser;

      if (user == null) {
        print("‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
        return;
      }

      print("üîπ UID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡∏π‡πà: ${user.uid}");

      // üîπ ‡∏î‡∏∂‡∏á docId ‡∏à‡∏≤‡∏Å Stream

      // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á Credential ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏≠‡∏≠‡∏ò‡∏¥‡πÄ‡∏Å‡∏£‡∏ô
      AuthCredential credential = EmailAuthProvider.credential(
        email: user.email!,
        password: oldPassword,
      );

      // üîπ ‡∏£‡∏µ‡∏≠‡∏≠‡∏ò‡∏¥‡πÄ‡∏Å‡∏£‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      await user.reauthenticateWithCredential(credential);
      print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏≠‡∏≠‡∏ò‡∏¥‡πÄ‡∏Å‡∏£‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

      // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô Firebase Authentication
      await user.updatePassword(newPassword);
      print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô Firebase Authentication ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } on FirebaseAuthException catch (e) {
      print("üî• Firebase Error: ${e.code}");
      print("üî• Error Message: ${e.message}");
      throw Exception(
        "Error updating password in Firebase Authentication: ${e.message}",
      );
    } catch (e) {
      print("üî• Error: ${e.toString()}");
      throw Exception("Error updating password: ${e.toString()}");
    }
  }

  // delete
  Future<void> removeAddress(String userId, String addressDocId) async {
    DocumentReference addressDoc = FirebaseFirestore.instance
        .collection('Customer')
        .doc(userId)
        .collection('addresses')
        .doc(addressDocId);

    // ‡∏•‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
    await addressDoc.delete();
  }

  //-------------------------
  final CollectionReference booking = FirebaseFirestore.instance.collection(
    'Booking',
  );
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
  Future<void> addBooking(
    String customerDocId,
    String employeeDocId,
    String address,
    String bookingDate,
    String serviceDate,
    String detail,
    double totalPrice,
    String status,
  ) async {
    DocumentReference documentReference = await booking.add({
      'customer': customerDocId,
      'employee': employeeDocId,
      'address': address,
      'bookingDate': bookingDate,
      'serviceDate': serviceDate,
      'detail': detail,
      'totalPrice': totalPrice,
      'status': status,
    });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï docId ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    await documentReference.update({'docId': documentReference.id});
  }

  //----------ADMIn
  final CollectionReference admin = FirebaseFirestore.instance.collection(
    'Admin',
  );
  Stream<QuerySnapshot> getWhereDocIdAdmin(String docId) {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° docId
    return admin.where(FieldPath.documentId, isEqualTo: docId).snapshots();
  }
  //----------Promotion

  final CollectionReference promotion = FirebaseFirestore.instance.collection(
    'Promotions',
  );

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° docId
 Stream<QuerySnapshot> getPromotion() {
  // Get current date at midnight in local timezone (UTC+7)
  DateTime currentDate = DateTime.now();  // Current date in local timezone (UTC+7)
  DateTime currentDateAtMidnight = DateTime(currentDate.year, currentDate.month, currentDate.day);

  DateTime currentDateAtMidnightUTC = currentDateAtMidnight.toUtc();

  Timestamp timestampCurrentDate = Timestamp.fromDate(currentDateAtMidnightUTC);

  // Query Firestore, using isLessThan with the Timestamp, and ensure correct ordering.
  final promotionStream = FirebaseFirestore.instance
      .collection('Promotions')
      .where('endDate', isGreaterThanOrEqualTo: timestampCurrentDate)
      .orderBy('endDate')  // Order by endDate for consistency
      .snapshots();

  return promotionStream;
}


}
